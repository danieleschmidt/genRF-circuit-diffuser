# Release automation workflow for GenRF Circuit Diffuser
# This file should be manually created at .github/workflows/release.yml

name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

env:
  PYTHON_VERSION: "3.11"

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate version format
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
          else
            VERSION="${{ github.ref_name }}"
            IS_PRERELEASE="false"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          
          # Validate semantic version format
          if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9\-\.]+)?$ ]]; then
            echo "Invalid version format: $VERSION"
            echo "Expected format: v1.2.3 or v1.2.3-alpha.1"
            exit 1
          fi
          
          echo "Validated version: $VERSION"

      - name: Check if tag exists (for workflow_dispatch)
        if: github.event_name == 'workflow_dispatch'
        run: |
          if git rev-parse "${{ steps.version.outputs.version }}" >/dev/null 2>&1; then
            echo "Tag ${{ steps.version.outputs.version }} already exists"
            exit 1
          fi

  run-tests:
    name: Run Full Test Suite
    runs-on: ubuntu-latest
    needs: validate-release
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ngspice

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Run tests
        run: |
          pytest tests/ -v --cov=genrf --cov-report=xml

      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.11'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml

  build-package:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [validate-release, run-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Update version in pyproject.toml
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          VERSION_NUMBER="${VERSION#v}"  # Remove 'v' prefix
          
          # Update version in pyproject.toml
          sed -i "s/version = \".*\"/version = \"$VERSION_NUMBER\"/" pyproject.toml
          
          # Verify the change
          grep "version = " pyproject.toml

      - name: Build source distribution
        run: |
          python -m build --sdist

      - name: Build wheel distribution
        run: |
          python -m build --wheel

      - name: Check distribution
        run: |
          twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/
          retention-days: 30

  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [validate-release, run-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: genrf/genrf-circuit-diffuser
          tags: |
            type=ref,event=tag
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ needs.validate-release.outputs.version }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  generate-changelog:
    name: Generate Changelog
    runs-on: ubuntu-latest
    needs: validate-release
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          echo "Generating changelog for $VERSION"
          
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "Comparing $PREVIOUS_TAG..HEAD"
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" "$PREVIOUS_TAG..HEAD" --grep="^feat" --grep="^fix" --grep="^docs" --grep="^perf" --grep="^refactor" --grep="BREAKING CHANGE" --extended-regexp)
          else
            echo "No previous tag found, generating initial changelog"
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --grep="^feat" --grep="^fix" --grep="^docs" --grep="^perf" --grep="^refactor" --grep="BREAKING CHANGE" --extended-regexp)
          fi
          
          if [ -z "$CHANGELOG" ]; then
            CHANGELOG="- Initial release"
          fi
          
          # Save changelog to file and output
          echo "$CHANGELOG" > changelog.txt
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Upload changelog
        uses: actions/upload-artifact@v3
        with:
          name: changelog
          path: changelog.txt

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, run-tests, build-package, build-docker, generate-changelog]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/

      - name: Create release tag (for workflow_dispatch)
        if: github.event_name == 'workflow_dispatch'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "${{ needs.validate-release.outputs.version }}" -m "Release ${{ needs.validate-release.outputs.version }}"
          git push origin "${{ needs.validate-release.outputs.version }}"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.validate-release.outputs.version }}
          release_name: GenRF Circuit Diffuser ${{ needs.validate-release.outputs.version }}
          body: |
            # GenRF Circuit Diffuser ${{ needs.validate-release.outputs.version }}
            
            ## What's Changed
            
            ${{ needs.generate-changelog.outputs.changelog }}
            
            ## Installation
            
            ```bash
            pip install genrf-circuit-diffuser==${{ needs.validate-release.outputs.version }}
            ```
            
            ## Docker
            
            ```bash
            docker pull genrf/genrf-circuit-diffuser:${{ needs.validate-release.outputs.version }}
            ```
            
            ## Verification
            
            The release artifacts can be verified using the checksums below:
            
            - Source distribution: `genrf-circuit-diffuser-*.tar.gz`
            - Wheel distribution: `genrf_circuit_diffuser-*-py3-none-any.whl`
            
            For installation instructions and documentation, visit our [documentation site](https://genrf-circuit.readthedocs.io).
            
          draft: false
          prerelease: ${{ needs.validate-release.outputs.is_prerelease == 'true' }}

      - name: Upload source distribution
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/genrf-circuit-diffuser-*.tar.gz
          asset_name: genrf-circuit-diffuser-${{ needs.validate-release.outputs.version }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload wheel distribution
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/genrf_circuit_diffuser-*-py3-none-any.whl
          asset_name: genrf_circuit_diffuser-${{ needs.validate-release.outputs.version }}-py3-none-any.whl
          asset_content_type: application/zip

  publish-to-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [validate-release, create-github-release]
    environment:
      name: pypi
      url: https://pypi.org/p/genrf-circuit-diffuser
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://upload.pypi.org/legacy/
          verbose: true

  update-documentation:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [validate-release, publish-to-pypi]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install sphinx sphinx-rtd-theme

      - name: Update version badges
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          VERSION_NUMBER="${VERSION#v}"
          
          # Update version badge in README
          sed -i "s/version-[0-9]\+\.[0-9]\+\.[0-9]\+/version-$VERSION_NUMBER/g" README.md
          sed -i "s/v[0-9]\+\.[0-9]\+\.[0-9]\+/v$VERSION_NUMBER/g" README.md

      - name: Build documentation
        run: |
          cd docs
          make html

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/_build/html

  post-release-notifications:
    name: Post-Release Notifications
    runs-on: ubuntu-latest
    needs: [validate-release, publish-to-pypi, update-documentation]
    if: always()
    steps:
      - name: Send success notification
        if: needs.publish-to-pypi.result == 'success'
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo } = context.repo;
            const version = '${{ needs.validate-release.outputs.version }}';
            
            await github.rest.issues.create({
              owner,
              repo,
              title: `🎉 Release ${version} Published Successfully`,
              body: `
                # Release ${version} Published
                
                The release has been successfully published to:
                
                - ✅ [GitHub Releases](https://github.com/${owner}/${repo}/releases/tag/${version})
                - ✅ [PyPI](https://pypi.org/project/genrf-circuit-diffuser/${version.substring(1)}/)
                - ✅ [Docker Hub](https://hub.docker.com/r/genrf/genrf-circuit-diffuser/tags)
                - ✅ [Documentation](https://genrf-circuit.readthedocs.io)
                
                ## Installation
                
                \`\`\`bash
                pip install genrf-circuit-diffuser==${version.substring(1)}
                \`\`\`
                
                Thank you to all contributors! 🚀
              `,
              labels: ['release', 'announcement']
            });

      - name: Send failure notification
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo } = context.repo;
            const version = '${{ needs.validate-release.outputs.version }}';
            
            await github.rest.issues.create({
              owner,
              repo,
              title: `❌ Release ${version} Failed`,
              body: `
                # Release ${version} Failed
                
                The release process encountered an error. Please check the workflow logs and retry.
                
                **Workflow Run**: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
                
                ## Status
                - Validate: ${{ needs.validate-release.result }}
                - Tests: ${{ needs.run-tests.result }}
                - Build: ${{ needs.build-package.result }}
                - Docker: ${{ needs.build-docker.result }}
                - GitHub Release: ${{ needs.create-github-release.result }}
                - PyPI: ${{ needs.publish-to-pypi.result }}
                - Docs: ${{ needs.update-documentation.result }}
              `,
              labels: ['release', 'bug', 'critical']
            });