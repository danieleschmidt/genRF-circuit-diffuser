# Documentation build and deployment workflow for GenRF Circuit Diffuser
# This file should be manually created at .github/workflows/docs.yml

name: Documentation

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'docs/**'
      - 'genrf/**/*.py'
      - 'README.md'
      - 'pyproject.toml'
  pull_request:
    branches: [ main ]
    paths:
      - 'docs/**'
      - 'genrf/**/*.py'
      - 'README.md'
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"

jobs:
  check-docs:
    name: Check Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install sphinx sphinx-rtd-theme myst-parser
          pip install -e .

      - name: Check documentation syntax
        run: |
          cd docs
          sphinx-build -W -b html . _build/html

      - name: Check for broken links
        run: |
          cd docs
          sphinx-build -W -b linkcheck . _build/linkcheck

      - name: Check API documentation coverage
        run: |
          sphinx-apidoc -f -o docs/api genrf/
          cd docs
          sphinx-build -W -b coverage . _build/coverage
          
          # Check coverage report
          if [ -f "_build/coverage/python.txt" ]; then
            cat _build/coverage/python.txt
            
            # Fail if coverage is too low
            UNDOC_COUNT=$(grep -c "UNDOCUMENTED" _build/coverage/python.txt || echo "0")
            if [ "$UNDOC_COUNT" -gt 5 ]; then
              echo "Too many undocumented modules/functions: $UNDOC_COUNT"
              exit 1
            fi
          fi

      - name: Validate README
        run: |
          # Check if README has required sections
          grep -q "## Installation" README.md
          grep -q "## Quick Start" README.md
          grep -q "## Documentation" README.md
          grep -q "## Contributing" README.md
          grep -q "## License" README.md

      - name: Check markdown files
        uses: DavidAnson/markdownlint-action@v1
        with:
          files: '**/*.md'
          ignore: 'CHANGELOG.md'
          config: '.markdownlint.yml'

      - name: Upload documentation artifacts
        uses: actions/upload-artifact@v3
        with:
          name: documentation-check
          path: |
            docs/_build/html
            docs/_build/linkcheck
            docs/_build/coverage

  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    needs: check-docs
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for version info

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pandoc

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .
          
          # Documentation dependencies
          pip install \
            sphinx \
            sphinx-rtd-theme \
            sphinx-autodoc-typehints \
            sphinx-copybutton \
            myst-parser \
            jupyter-sphinx \
            matplotlib \
            plotly \
            nbsphinx

      - name: Generate API documentation
        run: |
          sphinx-apidoc -f -o docs/api genrf/
          
          # Generate changelog from git history
          git log --pretty=format:"- %s (%h)" --since="6 months ago" > docs/changelog-generated.md

      - name: Build documentation
        run: |
          cd docs
          
          # Build HTML documentation
          sphinx-build -W -b html . _build/html
          
          # Build PDF documentation
          sphinx-build -W -b latex . _build/latex
          cd _build/latex
          make all-pdf || echo "PDF generation failed, continuing..."
          cd ../..

      - name: Generate coverage report
        run: |
          cd docs
          sphinx-build -b coverage . _build/coverage
          
          # Generate summary
          echo "# Documentation Coverage Report" > _build/html/coverage-summary.md
          echo "" >> _build/html/coverage-summary.md
          
          if [ -f "_build/coverage/python.txt" ]; then
            echo "## API Documentation Coverage" >> _build/html/coverage-summary.md
            echo "" >> _build/html/coverage-summary.md
            echo '```' >> _build/html/coverage-summary.md
            cat _build/coverage/python.txt >> _build/html/coverage-summary.md
            echo '```' >> _build/html/coverage-summary.md
          fi

      - name: Optimize documentation
        run: |
          cd docs/_build/html
          
          # Compress images
          find . -name "*.png" -exec optipng -o5 {} \; || echo "optipng not available"
          
          # Generate sitemap
          find . -name "*.html" | sed 's|^.|https://genrf-circuit.readthedocs.io|' > sitemap.txt
          
          # Add robots.txt
          echo "User-agent: *" > robots.txt
          echo "Allow: /" >> robots.txt
          echo "Sitemap: https://genrf-circuit.readthedocs.io/sitemap.txt" >> robots.txt

      - name: Upload built documentation
        uses: actions/upload-artifact@v3
        with:
          name: documentation
          path: docs/_build/html/
          retention-days: 30

      - name: Upload PDF documentation
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: documentation-pdf
          path: docs/_build/latex/*.pdf
          retention-days: 30

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: build-docs
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      pages: write
      id-token: write
    steps:
      - name: Download documentation
        uses: actions/download-artifact@v3
        with:
          name: documentation
          path: docs/

      - name: Setup Pages
        uses: actions/configure-pages@v3

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v2
        with:
          path: docs/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2

  deploy-readthedocs:
    name: Trigger Read the Docs Build
    runs-on: ubuntu-latest
    needs: build-docs
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Trigger Read the Docs build
        run: |
          curl -X POST \
            -H "Authorization: Token ${{ secrets.READTHEDOCS_TOKEN }}" \
            https://readthedocs.org/api/v3/projects/genrf-circuit-diffuser/versions/latest/builds/

  test-examples:
    name: Test Documentation Examples
    runs-on: ubuntu-latest
    needs: build-docs
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .
          pip install jupyter nbconvert

      - name: Test code examples in documentation
        run: |
          # Extract and test Python code blocks from markdown files
          python scripts/test_docs_examples.py docs/

      - name: Test Jupyter notebooks
        run: |
          # Test any example notebooks
          find docs/ -name "*.ipynb" -exec jupyter nbconvert --to notebook --execute {} \;

  spell-check:
    name: Spell Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install aspell
        run: |
          sudo apt-get update
          sudo apt-get install -y aspell aspell-en

      - name: Run spell check
        run: |
          # Create custom dictionary for technical terms
          echo "GenRF
          SPICE
          PyTorch
          NgSpice
          XYCE
          PySpice
          Grafana
          Prometheus
          Jaeger
          LNA
          VCO
          Cadence
          Virtuoso
          TSMC
          GlobalFoundries
          SkyWater
          CycleGAN
          diffusion
          netlist
          PDK
          Verilog" > .aspell.en.pws
          
          # Check markdown files
          find docs/ -name "*.md" -exec aspell --personal=.aspell.en.pws --check {} \;
          find . -maxdepth 1 -name "*.md" -exec aspell --personal=.aspell.en.pws --check {} \;

  accessibility-check:
    name: Accessibility Check
    runs-on: ubuntu-latest
    needs: build-docs
    steps:
      - name: Download documentation
        uses: actions/download-artifact@v3
        with:
          name: documentation
          path: docs/

      - name: Install accessibility tools
        run: |
          npm install -g @axe-core/cli

      - name: Run accessibility audit
        run: |
          # Start a simple HTTP server
          cd docs
          python -m http.server 8000 &
          SERVER_PID=$!
          
          # Wait for server to start
          sleep 5
          
          # Run axe accessibility tests
          axe http://localhost:8000 --exit
          
          # Stop server
          kill $SERVER_PID

  docs-summary:
    name: Documentation Summary
    runs-on: ubuntu-latest
    needs: [check-docs, build-docs, deploy-docs, test-examples, spell-check, accessibility-check]
    if: always()
    steps:
      - name: Generate summary
        run: |
          echo "# Documentation Build Summary" > summary.md
          echo "" >> summary.md
          echo "## Build Results" >> summary.md
          echo "" >> summary.md
          
          if [ "${{ needs.check-docs.result }}" == "success" ]; then
            echo "✅ Documentation Check: Passed" >> summary.md
          else
            echo "❌ Documentation Check: Failed" >> summary.md
          fi
          
          if [ "${{ needs.build-docs.result }}" == "success" ]; then
            echo "✅ Documentation Build: Passed" >> summary.md
          else
            echo "❌ Documentation Build: Failed" >> summary.md
          fi
          
          if [ "${{ needs.deploy-docs.result }}" == "success" ]; then
            echo "✅ Documentation Deploy: Passed" >> summary.md
          elif [ "${{ needs.deploy-docs.result }}" == "skipped" ]; then
            echo "⏭️ Documentation Deploy: Skipped" >> summary.md
          else
            echo "❌ Documentation Deploy: Failed" >> summary.md
          fi
          
          if [ "${{ needs.test-examples.result }}" == "success" ]; then
            echo "✅ Example Tests: Passed" >> summary.md
          else
            echo "❌ Example Tests: Failed" >> summary.md
          fi

      - name: Comment PR with summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });